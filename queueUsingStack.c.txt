#include <stdio.h>

#define SIZE 5

int queue[SIZE];
int front = -1, rear = -1;

int top=-1;
int stack[SIZE];

int isFull() {
  if ((front == rear + 1) || (front == 0 && rear == SIZE - 1)) return 1;
  return 0;
}

int isEmpty() {
  if (front == -1) return 1;
  return 0;
}

void enqueue(int element) {
  if (isFull())
    printf("\n Queue is full!! \n");
  else {
    if (front == -1) front = 0;
    rear = (rear + 1) % SIZE;
    queue[rear] = element;
    printf("\n Inserted -> %d", element);
  }
}

int dequeue() {
  int element;
  if (isEmpty()) {
    printf("\n Queue is empty !! \n");
    return (-1);
  } else {
    element = queue[front];
    if (front == rear) {
      front = -1;
      rear = -1;
    } 
    else {
      front = (front + 1) % SIZE;
    }
    printf("\n Deleted element -> %d \n", element);
    return (element);
  }
}

void display() {
  int i;
  if (isEmpty())
    printf(" \n Empty Queue\n");
  else {
    printf("\n Front -> %d ", front);
    printf("\n Items -> ");
    for (i = front; i != rear; i = (i + 1) % SIZE) {
      printf("%d ", queue[i]);
    }
    printf("%d ", queue[i]);
    printf("\n Rear -> %d \n", rear);
  }
}

void push(int data){
    if(top==SIZE-1){
        printf("\nOverflow\n");
        return;
    }else{
        printf(" Inserted in stack -> %d\n", data);
        stack[++top]=data;
    }
}
void pop(){
    if(top==-1){
        printf("\nUnderflow\n");
        return;
    }else{
        printf("\nThe element %d has been popped\n", stack[top]);
        top--;
    }
}
void reverse(){
    int i;
    for (i = front; i != rear; i = (i + 1) % SIZE) {
      push(queue[i]);
    }
    push(queue[i]);
    rear=-1;
    front=-1;
    while(top!=-1){
        enqueue(stack[top]);
        top--;
    }
}
int main() {

  enqueue(4);
  enqueue(5);
  printf("\n");
  display();

  reverse();
  printf("\n");
  display();
  return 0;
}
